// <auto-generated />
using System;
using CarrierAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarrierAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190823082337_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarrierDomain.Models.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActiveAdv");

                    b.Property<string>("AdvertisementPassage");

                    b.Property<string>("AdvertisementTitle");

                    b.Property<Guid>("CarrierId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("EmployerId");

                    b.Property<string>("Position");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("CarrierDomain.Models.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarrierTitle");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("Id");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("CarrierDomain.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CarrierDomain.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CarrierDomain.Models.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("SkillId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("CarrierDomain.Models.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double>("FromSalary");

                    b.Property<double>("ToSalary");

                    b.HasKey("Id");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("CarrierDomain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("SkillTitle");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CarrierDomain.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("UniversityName");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("CarrierDomain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CV");

                    b.Property<Guid>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FullName");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("MoreInfo");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Section");

                    b.Property<int>("UserType");

                    b.Property<string>("Username");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("CarrierDomain.Models.Employee", b =>
                {
                    b.HasBaseType("CarrierDomain.Models.User");

                    b.Property<Guid>("CarrierId");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("Phone");

                    b.Property<Guid>("SalaryId");

                    b.Property<Guid>("UniversityId");

                    b.Property<string>("UniversityInfo");

                    b.HasIndex("CarrierId");

                    b.HasIndex("SalaryId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Employee");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("CarrierDomain.Models.Employer", b =>
                {
                    b.HasBaseType("CarrierDomain.Models.User");

                    b.Property<string>("Address");

                    b.ToTable("Employer");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("CarrierDomain.Models.Advertisement", b =>
                {
                    b.HasOne("CarrierDomain.Models.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarrierDomain.Models.Employer", "Employer")
                        .WithMany("Advertisements")
                        .HasForeignKey("EmployerId");
                });

            modelBuilder.Entity("CarrierDomain.Models.City", b =>
                {
                    b.HasOne("CarrierDomain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarrierDomain.Models.EmployeeSkill", b =>
                {
                    b.HasOne("CarrierDomain.Models.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarrierDomain.Models.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarrierDomain.Models.User", b =>
                {
                    b.HasOne("CarrierDomain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarrierDomain.Models.Employee", b =>
                {
                    b.HasOne("CarrierDomain.Models.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarrierDomain.Models.Salary", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarrierDomain.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
